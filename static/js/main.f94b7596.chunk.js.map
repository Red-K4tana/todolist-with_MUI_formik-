{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","app/app-reducer.ts","utils/error-utils.ts","features/TodolistsList/tasks-reducer.ts","features/TodolistsList/todolists-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/auth-reducer.ts","features/Login/Login.tsx","app/Error404.tsx","app/App.tsx","app/store.ts","index.tsx","app/Error404.module.css"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","initialState","isInit","status","error","setAppErrorAC","type","setAppStatusAC","handleServerAppError","dispatch","messages","length","handleServerNetworkError","errorMessage","updateTaskTC","domainModel","getState","task","tasks","find","t","Error","apiModel","deadline","description","priority","startDate","res","resultCode","action","updateTaskAC","catch","fetchTodolistsTC","todolists","todolist","forEach","tl","items","setTasksAC","response","message","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","style","paddingTop","Button","TodolistsList","useSelector","state","isLoggedIn","auth","useDispatch","useEffect","thunk","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","setIsLoggedInAC","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justifyContent","FormControl","FormLabel","href","target","handleSubmit","FormGroup","margin","getFieldProps","FormControlLabel","control","Error404","s","parentError404","error404","App","finally","position","top","textAlign","CircularProgress","logoutHandler","AppBar","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","rootReducer","combineReducers","todoListId","copyState","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","basename","process","document","getElementById","baseUrl","module","exports"],"mappings":"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","file":"static/js/main.f94b7596.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '9bad4dc1-4f5c-485a-93a2-c73a0c7180c8'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{userId: number}>>>(`auth/login`, data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<MeResponseType>>('auth/me')\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('auth/login')\r\n    }\r\n}\r\n\r\n// types-login\r\ntype MeResponseType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: boolean\r\n}\r\n\r\n// types-todolist\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\r\n// TYPES\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type InitialStateType = {\r\n    // если false то условие в App покажет true и заретурнет, после чего сразу попадем в useEffect\r\n    isInit: any,\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType,\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null,\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    isInit: false, // should be 'false' to work with authorization\r\n    status: 'idle',\r\n    error: null,\r\n}\r\n// REDUCER\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/IS-INIT':\r\n            return {...state, isInit: action.isInit}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\n\r\n//ACTIONS\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | SetAppInitActionType\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppInitActionType = ReturnType<typeof setAppInitAC>\r\n\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppInitAC = (isInit: any) => ({type: 'APP/IS-INIT', isInit} as const)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (errorMessage: string, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n\r\n    const textError = () => {\r\n        if (errorMessage) {\r\n            if (errorMessage === 'Authorization has been denied for this request.') {\r\n                return 'Authorization please!'\r\n            } else\r\n                return errorMessage\r\n        } else {\r\n            return 'Some error occurred'\r\n        }\r\n    }\r\n    dispatch(setAppErrorAC(textError()))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import { AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType } from './todolists-reducer'\r\nimport { TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType } from '../../api/todolists-api'\r\nimport { Dispatch } from 'redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from '../../app/app-reducer'\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => ({\r\n    type: 'UPDATE-TASK',\r\n    model,\r\n    todolistId,\r\n    taskId\r\n} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n    type: 'SET-TASKS',\r\n    tasks,\r\n    todolistId\r\n} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {\r\n    RequestStatusType,\r\n    setAppErrorAC,\r\n    SetAppErrorActionType,\r\n    setAppStatusAC,\r\n    SetAppStatusActionType\r\n} from '../../app/app-reducer'\r\nimport {handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {fetchTasksTC} from \"./tasks-reducer\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\n\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE', id, title} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER', id, filter} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                return res.data\r\n            })\r\n            .then(todolist => {\r\n                todolist.forEach(tl => {\r\n                    dispatch(fetchTasksTC(tl.id))\r\n                })\r\n            })\r\n            .catch(error => {\r\n            handleServerNetworkError(error.response.data.message, dispatch)\r\n        })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatchMe) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC('loading'))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatchMe) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatchMe = Dispatch<ActionsType>\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id}\r\n                                                task={t}\r\n                                                todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport { addTaskTC, removeTaskTC, TasksStateType, updateTaskTC } from './tasks-reducer'\r\nimport { TaskStatuses } from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm'\r\nimport { Todolist } from './Todolist/Todolist'\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {InitialAuthStateType, initializeAppTC} from \"../Login/auth-reducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, InitialAuthStateType>(state => state.auth).isLoggedIn\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return;\r\n        }\r\n\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: Event | React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import { Dispatch } from 'redux'\r\nimport {\r\n    SetAppErrorActionType,\r\n    setAppInitAC,\r\n    SetAppInitActionType,\r\n    setAppStatusAC,\r\n    SetAppStatusActionType,\r\n} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false // should be 'false' to work with authorization\r\n}\r\nexport type InitialAuthStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialAuthStateType = initialState, action: ActionsType): InitialAuthStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const initializeAppTC = () => (dispatch: Dispatch<ActionsType>)=> {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => {\r\n                handleServerNetworkError(error, dispatch)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setAppInitAC(true))\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType | SetAppInitActionType","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {InitialAuthStateType, loginTC} from \"./auth-reducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, InitialAuthStateType>(state => state.auth).isLoggedIn\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: 'rdm911@list.ru',\r\n            password: '1234',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required email';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required password';\r\n            } else if (values.password.length < 2) {\r\n                errors.password = 'Must be 2 characters or less';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            /*console.log(values)*/\r\n            /*alert(JSON.stringify(values));*/\r\n            formik.resetForm(); // затираем поля после ввода\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'} />\r\n    }\r\n\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}> here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: <i>free@samuraijs.com</i></p>\r\n                    <p>Password: <i>free</i></p>\r\n                </FormLabel>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')} // Reducing Boilerplate\r\n                            // name={'email'}\r\n                            // onChange={formik.handleChange}\r\n                            // value={formik.values.email}\r\n                        />\r\n                        {formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        {/*{formik.touched.email && formik.errors.email ? (<div>{formik.errors.email}</div>) : null}*/}\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('password')} // Reducing Boilerplate\r\n\r\n                                    // запись Reducing Boilerplate значит, что мы используем getFieldProps\r\n                                    // вместо name, onChange и value\r\n                        />\r\n                        {formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        {/*{formik.touched.password && formik.errors.password ? (<div>{formik.errors.password}</div>) : null}*/}\r\n\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                                // name=\"rememberMe\"\r\n                                // onChange={formik.handleChange} // переключение чекбокса отправляется в formik\r\n                                // checked={formik.values.rememberMe} // отображение галочки в чекбоксе приходит из formik`а\r\n                            />}\r\n                        />\r\n\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n\r\n\r\n                </form>\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React from 'react'\nimport s from './Error404.module.css'\n\nfunction Error404() {\n    return (\n        <div className={s.parentError404}>\n            <div className={s.error404}>\n            </div>\n        </div>\n    )\n}\n\nexport default Error404\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport { TodolistsList } from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport { AppRootStateType } from './store'\r\nimport {RequestStatusType, } from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport { Menu } from '@mui/icons-material';\r\nimport { ErrorSnackbar } from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Login} from \"../features/Login/Login\";\r\nimport { Route, Routes} from \"react-router-dom\";\r\nimport Error404 from \"./Error404\";\r\nimport {InitialAuthStateType, initializeAppTC, loginTC, logoutTC} from \"../features/Login/auth-reducer\";\r\nimport {CircularProgress} from \"@mui/material\";\r\n\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInit = useSelector<AppRootStateType, boolean>((state) => state.app.isInit)\r\n    const isLoggedIn = useSelector<AppRootStateType, InitialAuthStateType>(state => state.auth).isLoggedIn\r\n\r\n    useEffect(()=>{\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if (!isInit) {\r\n        return <div style={{position: \"fixed\", top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Todolist\r\n                    </Typography>\r\n                    {isLoggedIn && <Button variant={'contained'}\r\n                                           color={'primary'}\r\n                                           onClick={()=>logoutHandler()}>\r\n                        logout\r\n                    </Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={'/'} element={<TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} element={<Login />}/>\r\n                    {/*<Route path=\"*\" element={<Navigate to='/404' />}/>*/} {/* \" * \" означает неправильный URL  */}\r\n                    <Route path=\"*\" element={<Error404 />}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import { tasksReducer } from '../features/TodolistsList/tasks-reducer';\r\nimport { todolistsReducer } from '../features/TodolistsList/todolists-reducer';\r\nimport { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { appReducer } from './app-reducer'\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\r\n\r\n\r\n\r\nReactDOM.render(\r\n<React.StrictMode>\r\n    <Provider store={store}>\r\n        <BrowserRouter basename={process.env.PUBLIC_URL} >\r\n            <App/>\r\n        </BrowserRouter>\r\n    </Provider>\r\n</React.StrictMode>\r\n        ,\r\n\r\n    document.getElementById('root')\r\n);\r\n\r\n// @ts-ignore\r\nwindow.baseUrl = process.env.PUBLIC_URL\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"parentError404\":\"Error404_parentError404__rLVDs\",\"error404\":\"Error404_error404__1tXVr\"};"],"sourceRoot":""}